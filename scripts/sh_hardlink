#!/bin/bash
#############################################################################################
###########                                                                       ###########
######                                                                                 ######
##                                                                                         ##
# \author       Luciano Augusto Kruk                                                        #
# \web          www.kruk.eng.br                                                             #
#                                                                                           #
# \description  This script replaces several occurences of a file by only one harlinked     #
#               copy. The main propose is to complement an old functionality of 'fdupe'     #
#               application. In former times, 'fdupes' would be responsible for finding     #
#               equal files in a filesystem, and replace them by one hardlinked copy.       #
#               Its current version had this functionality removed (why?????). So, this     #
#               script intents to add the capability again.                                 #
#                                                                                           #
# \copyright    Please keep this head when you distribute this script.                      #
##                                                                                         ##
######                                                                                 ######
###########                                                                       ###########
#############################################################################################


# @author: Luciano Kruk

fn_usage()
{
    echo "Usage:"
    echo "   sh_hardlink <file_2_keep> <... list of files to remove and hardlink ...>"
    echo
    exit -1
}

fn_hard()
{
    echo `stat -c "%h" "$1"`
}

fn_inode()
{
    echo `stat -c "%i" "$1"`
}

fn_gerate()
{
    echo `stat -c "%D" "$1"`
}

# check if file $1 is ok to keep:
keep="$1"
[ -f "$keep" -a ! -h "$keep" ] || { echo "file '$keep' is not a regular file!"; exit -1; }

# count the hard references:
hard=`fn_hard "$keep"`
echo "file '$keep' has $hard hard reference(s)."

# inode and device from the safe file:
inode=`fn_inode "$keep"`
gerate=`fn_gerate "$keep"`

# loop the other files in list:
shift
while [ $# -gt 0 ]; do
    printf "checking if '$1' is a regular file ..."
    [ -f "$1" -a ! -h "$1" ] && printf " OK\n" || { printf " NOK\n"; shift; continue; }

    # do not touch files with same 'inode':
    [ $inode -eq `fn_inode "$1"` ] && { echo "files '$keep' and '$1' are the same! skipping"; shift; continue; }

    # the command 'ln' creates a hard link if the files are in the same fs; but
    # it returns with error if not.

    # skip files from different fs:
    [ $gerate != `fn_gerate "$1"` ] && { echo "files '$keep' and '$1' are in different fs! skipping"; shift; continue; }

    # here, the inodes are different, and the fs is the same...
    echo "-----------------------"
    echo "::- ready to remove -::"
    echo "-----------------------"

    printf "linking file '$1' ... "
    ln -f "$keep" "$1"
    if [ $hard -lt `fn_hard "$keep"` ]; then
        hard=`fn_hard "$keep"`
        printf "OK\n"
        echo "file '$keep' now has $hard hard references"
    else
        cp -f "$keep" "$1"
        printf "NOK\n"
    fi

    shift
done

#############################################################################################
